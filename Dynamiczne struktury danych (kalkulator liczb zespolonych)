#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <stdbool.h>
#include <string.h>
// "euler" hasło do 1 kartkówki
#define BUFFSIZE 100

struct zespolona
{
	float Im;
	float Re;
};

struct stack
{
	struct zespolona z;
	struct stack* before;
};

typedef struct zespolona zespolona;
typedef struct stack stack;

stack* pop(stack* top, zespolona* toPop, int* stackCount);
stack* push(stack* top, zespolona* new, int* stackCount);
void stackState(stack* top, int stackCount);
void stackClean(stack* top);
zespolona* operacje(zespolona* poped1, zespolona* poped2, char operator);
bool isLiczba(char* buffer);
bool isOperator(char c);
bool isSpace(char c);

int main()
{
	stack* top = NULL; // wierzch stosu
	zespolona temp1;
	zespolona temp2;
	zespolona* toPush;
	char operator;
	char buffer[BUFFSIZE];
	char* buffRe;
	char* buffIm;
	int stackCount = 0;

	printf("mozliwy zapis:\n");
	printf("Re\n");
	printf("Re oddzielone spacja Im\n");
	printf("operator (+, -, /, *)\n");
	printf("inne znaki koncza zapis do kalkulatora\n");
	printf("enterem zatwierdzamy wpisanie pojedynczego elementu\n");

	// wpisywanie w danych Re albo Re || Im || operator || inny znak == koniec programu
	fgets(buffer, BUFFSIZE, stdin);
	while (isLiczba(buffer) || isOperator(*buffer)) // do innego znaku		// gdy minumum jedna z tych liczb !=0, to zrob petle
	{
		if (isLiczba(buffer)) {		//gdy buffer !=0
			buffRe = strtok(buffer, " ");		//bierze wszystko do separatora " " (spacja)
			temp1.Re = atof(buffRe);		//zamieniamy char na float
			if ((buffIm = strtok(NULL, " ")) != NULL)			//zczytuje od spacji do końca (czyli bierze Im)
				temp1.Im = atof(buffIm);			//jak jest Im, to zamien na float
			else {
				temp1.Im = 0;		////jak nie ma Im, to napisz że Im=0
				printf("toPush:\nRe: %f\nIm: %f\n", temp1.Re, temp1.Im);
			}
			top = push(top, &temp1, &stackCount);
			printf("stack count: %d\n", stackCount);
			//top = pop(top, &temp2, &stackCount);
			//printf("poped:\nRe: %f\nIm: %f\n", temp2.Re, temp2.Im);
			//printf("stack count: %d\n", stackCount);
		}
		else if (isOperator(*buffer))
		{
			if (stackCount >= 2) // sprawdz czy 2 liczby na stosie 
			{
				operator = *buffer;
				top = pop(top, &temp2, &stackCount); // first element poped

				top = pop(top, &temp1, &stackCount); // second element poped

				toPush = operacje(&temp1, &temp2, operator); // now top is element with temp1 which is new element temp2 do
				top = push(top, toPush, &stackCount); // result of operation is pushed
			}
			else
				printf("not enaught operators numbers on stack\n");
		}
		stackState(top, stackCount);
		fgets(buffer, BUFFSIZE, stdin);
	}
	// koncowy wynik kalkulatora
	if (stackCount == 1) {
		top = pop(top, &temp1, &stackCount);
		printf("wynik:\n");
		printf("Re = %f\n", temp1.Re);
		printf("Im = %f\n", temp1.Im);
	}
	else
		printf("niepoprawne wprowadzenie liczb do kalkulatora\n");


	
	stackClean(top);    // frees all memory allocated on stack

	return 0;
}

stack* push(stack* top, zespolona* new, int* stackCount)
{
	(*stackCount)++;
	stack* newElement;
	newElement = malloc(sizeof(stack));
	newElement->before = top;  // wczesniejszy to wczesniej najwyzszy na stosie
	newElement->z.Re = new->Re;
	newElement->z.Im = new->Im;
	return newElement;
}

stack* pop(stack* top, zespolona* toPop, int* stackCount)  // * top to już jest wskaźnik na struktóre
{
	(*stackCount)--;
	stack* newTop = top->before;
	toPop->Re = top->z.Re;
	toPop->Im = top->z.Im;
	free(top);
	return newTop;
}

void stackState(stack* top, int stackCount)
{
	if (top == NULL) {    // is empty?
		printf("stack is empty\n");
		return;
	}
	stack* temp = top;
	while (temp != NULL) // list all stack elements
	{
		printf("[%d] Re(z) %f Im(z) %f\n", stackCount--, temp->z.Re, temp->z.Im);
		temp = temp->before;
	}
	printf("koniec stosu\n\n");
}

void stackClean(stack* top)
{
	stack* tempTop;
	if (top == NULL) // empty
		return;
	tempTop = top->before;  // actual top after free
	free(top);
	top = tempTop;
	while (top->before != NULL)
	{
		tempTop = top->before;
		free(top);
		top = tempTop;
	}
}

zespolona* operacje(zespolona* poped1, zespolona* poped2, char operator)
{
	float mianownik = (pow(poped2->Re, 2) + pow(poped2->Im, 2));		//pow robi do potegi (tutaj do 2 potegi)			// tutaj do wzoru na dzielenie lub mnozenie zespolonych
	switch (operator)
	{
	case '+':
		poped1->Re += poped2->Re;
		poped1->Im += poped2->Im;
		break;
	case '-':
		poped1->Re -= poped2->Re;
		poped1->Im -= poped2->Im;
		break;
	case '/':   // chceck if 0 i sprzerzenie
		if (mianownik > 0) {
			printf("wynik %f %f\n", (((poped1->Re * poped2->Re) + (poped1->Im * poped2->Im)) / mianownik), poped1->Im = (((poped1->Im * poped2->Re) - (poped1->Re * poped2->Im)) / mianownik));
			poped1->Re = (((poped1->Re * poped2->Re) + (poped1->Im * poped2->Im)) / (pow(poped2->Re, 2) + pow(poped2->Im, 2))); // (ac - bd) / c^2 + b^2
			//poped1->Im = ( ( (poped1->Im * poped2->Re) - (poped1->Re * poped2->Im) ) / mianownik);
		}
		else
			printf("nie dziel przez zero\n");
		break;
	case '*':
		printf("wynik %f %f\n", (poped1->Re * poped2->Re) - (poped1->Im * poped2->Im), poped1->Im = (poped1->Re * poped2->Im) + (poped1->Im * poped2->Re));
		poped1->Re = (poped1->Re * poped2->Re) - (poped1->Im * poped2->Im); //  a*c - b*d 
		//poped1->Im =  (poped1->Re * poped2->Im) + (poped1->Im * poped2->Re); //  a*d + b*c
		//printf("aaaaaa: %f %f\n", poped1->Re, poped1->Im);
		break;
	default:
		perror("error1: wrong operator\n");
		break;
	}
	return poped1;
}

bool isLiczba(char* buffer) // sprawdza czy znaki to liczba do najblizszego znaku konca lini lub konca buffora
{
	int liczbCount = 0;
	int operatorCount = 0;
	while (*buffer != '\n' && *buffer != '\0')
	{
		if ((*buffer == '.' || *buffer == ',') || (*buffer >= '0' && *buffer <= '9') || isSpace(*buffer))   // !isNumber 
		{
			liczbCount++;
			buffer++;
		}
		else {
			if (*buffer++ == '-')
				operatorCount++;
			else
				return false;
		}
	}
	if (liczbCount > 0 || (operatorCount > 0 && liczbCount > 0))
		return true;
	else
		return false;
}

bool isOperator(char c)
{
	if (c == '+' || c == '-' || c == '/' || c == '*')
		return true;
	else
		return false;
}

bool isSpace(char c)
{
	if (c == ' ' || c == '\t')
		return true;
	else
		return false;
}

int spaceCount(char* buffer)
{
	int spaceCount = 0;
	while (*buffer != '\n' && *buffer != '\0')
	{
		if (*buffer == ' ')
			spaceCount++;
	}
	return spaceCount;
}
